create database if not exists college;
use college;
create table if not exists student(student_id integer(11) primary key,
name varchar(10) not null,year tinyint(4) default 1 not null,dept_no integer(11) not null,
major varchar(20));
desc student;
create table if not exists department(dept_no integer(11) primary key auto_increment,
dept_name varchar(20) unique  not null,office varchar(20) not null,office_tel varchar(13));
desc department;
delete from student;
delete from department;
alter table department AUTO_INCREMENT=1;
alter table student modify column major varchar(30) ;
alter table student add column gender char(1);
desc student;
alter table student drop column gender;
insert into department(dept_name,office,office_tel) values ('컴퓨터공학', '이학관 101호', '02-3290-0123');
insert into department(dept_name,office,office_tel) values ('전자공학', '공학관 401호', '02-3290-2345');
insert into department(dept_name,office,office_tel) values('법학', '법학관 201호', '02-3290-7896');
insert into department(dept_name,office,office_tel) values( '경영학', '경영관 104호', '02-3290-1112');
insert into department(dept_name,office,office_tel) values('영문학', '문화관 303호', '02-3290-4412');
insert into student values(20070002, '송은이', 3, 4, '경영학');
insert into student values(20060001, '박미선', 4, 4, '경영학'); 
insert into student values(20030001, '이경규', 4, 2, '전자공학'); 
insert into student values(20040003, '김용만', 3, 2, '전자공학'); 
insert into student values(20060002, '김국진', 3, 1, '컴퓨터공학'); 
insert into student values(20100002, '한선화', 3, 4, '경영학'); 
insert into student values(20110001, '송지은', 2, 1, '컴퓨터공학'); 
insert into student values(20080003, '전효성', 4, 3, '법학'); 
insert into student values(20040002, '김구라', 4, 5, '영문학');
 insert into student values(20070001, '김숙', 4, 4, '경영학'); 
insert into student values(20100001, '황광희', 3, 4, '경영학'); 
insert into student values(20110002, '권지용', 2, 1, '전자공학'); 
insert into student values(20030002, '김재진', 5, 1, '컴퓨터공학'); 
insert into student values(20070003, '신봉선', 4, 3, '법학'); 
insert into student values(20070005, '김신영', 2, 5, '영문학'); 
insert into student values(20100003, '임시환', 3, 1, '컴퓨터공학'); 
insert into student values(20070007, '정준하', 2, 4, '경영학');
select * from student;
select * from department;
update student set major='전자전기공학' where major='전자공학';
update department set dept_name='전자전기공학' where dept_name='전자공학';
select "====ex3====";
insert into department(dept_name,office,office_tel) values('특수교육학과','공학관 403호','02-3290-2347');
update student set dept_no=(select dept_no from department where dept_name='특수교육학과') ,major='특수교육학과' where name='송지은';
delete from student where name='권지용';
delete from student where name='김재진';
select * from student;
select * from department;
select "====ex4====";
select * from student where major='컴퓨터공학';
select student_id,year,major from student;
select * from student where year=3;
select * from student where year between 1 and 2;
select * from student where  dept_no = (select dept_no from department where dept_name='경영학');
select "====ex5====";
select * from student where student_id like '2007%';
select * from student order by student_id;
select major from student group by major having avg(year)>3;
select * from student where student_id like "%2007%" limit 2;
select "====ex6====";
use imdb;
select role from movies inner join roles on id=movie_id where name='Pi';
select first_name,last_name from (roles inner join movies on id=movie_id) inner join actors on actors.id=actor_id where movies.name="Pi";
select a.first_name,a.last_name from movies as m , actors as a,roles as r where m.id=r.movie_id and a.id=r.actor_id and m.name='Kill Bill: Vol. 1' and exists(select * from (roles inner join actors on actor_id=id) inner join movies on movies.id=movie_id where movies.name='Kill Bill: Vol. 2' and first_name=a.first_name and last_name=a.last_name);
select first_name,last_name,count(movie_id) from (roles inner join movies on movie_id=id) inner join actors on actors.id=actor_id group by first_name,last_name  order by count(movie_id) desc,first_name limit 7;
select genre from (select genre,count(*) cnt from movies_genres group by genre) tmp order by cnt desc,genre limit 3;
select first_name,last_name from (select first_name,last_name,count(*) as cnt from (directors inner join directors_genres on director_id=id) inner join movies_directors using(director_id) group by first_name,last_name order by cnt desc) as tmp where cnt=(select count(*) as cnt from (directors inner join directors_genres on director_id=id) inner join movies_directors using(director_id) group by first_name,last_name order by cnt desc limit 1);
select "====ex7====";
use simpsons;
select grade from (grades inner join courses on course_id=id) inner join students on student_id=students.id where courses.name='Computer Science 143';
select students.name,grade from (grades inner join courses on course_id=id) inner join students on student_id=students.id where courses.name='Computer Science 143' and (grade like 'A%' or grade like 'B%');
select students.name,courses.name,grade from (grades inner join courses on course_id=id) inner join students on student_id=students.id where  (grade like 'A%' or grade like 'B%') order by courses.name,students.name;
select courses.name from (grades inner join courses on course_id=id) inner join students on student_id=students.id  group by courses.name having count(students.name)>=2 order by courses.name;

use college;
drop table student;
drop table department;

