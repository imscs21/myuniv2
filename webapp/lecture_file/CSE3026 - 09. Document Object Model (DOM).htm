<!DOCTYPE html>
<!-- saved from url=(0074)http://selab.hanyang.ac.kr/courses/cse326/2017/lecture/09-dom.html#slide11 -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<!-- metadata -->
		
		<meta name="author" content="Scott Uk-Jin Lee">
		<meta name="description" content="Web lecture slides for CSE3026: Web Application Development.">
		<meta name="keywords" content="hanyang university, cse3026, web application development, lecture, html, css, javascript, dom, ajax, xml, php, jsp">
		
		<!-- style sheet links -->
		<link rel="stylesheet" href="./CSE3026 - 09. Document Object Model (DOM)_files/slides.css" type="text/css" media="screen" id="slideProj">
		<link rel="stylesheet" href="./CSE3026 - 09. Document Object Model (DOM)_files/outline.css" type="text/css" media="screen" id="outlineStyle" disabled="">
		<link rel="stylesheet" href="./CSE3026 - 09. Document Object Model (DOM)_files/print.css" type="text/css" media="print" id="slidePrint">
		<link rel="shortcut icon" href="http://selab.hanyang.ac.kr/courses/cse326/2017/lecture/images/SelabFavicon.png" type="image/png">

		<!-- S5 JS -->
		<script src="./CSE3026 - 09. Document Object Model (DOM)_files/prototype.js" type="text/javascript"></script>
		<script src="./CSE3026 - 09. Document Object Model (DOM)_files/scriptaculous.js" type="text/javascript"></script><script type="text/javascript" src="./CSE3026 - 09. Document Object Model (DOM)_files/builder.js"></script><script type="text/javascript" src="./CSE3026 - 09. Document Object Model (DOM)_files/effects.js"></script><script type="text/javascript" src="./CSE3026 - 09. Document Object Model (DOM)_files/dragdrop.js"></script><script type="text/javascript" src="./CSE3026 - 09. Document Object Model (DOM)_files/controls.js"></script><script type="text/javascript" src="./CSE3026 - 09. Document Object Model (DOM)_files/slider.js"></script><script type="text/javascript" src="./CSE3026 - 09. Document Object Model (DOM)_files/sound.js"></script>
		<script src="./CSE3026 - 09. Document Object Model (DOM)_files/slides.js" type="text/javascript"></script>
		<script src="./CSE3026 - 09. Document Object Model (DOM)_files/slides(1).js" type="text/javascript"></script>
		
		<title>CSE3026 - 09. Document Object Model (DOM)</title>
	<style media="screen, projection" id="s5ss">body {font-size: 28px !important;}</style></head>

		<body cz-shortcut-listen="true"><div class="layout">
			<div id="controls"><form action="http://selab.hanyang.ac.kr/courses/cse326/2017/lecture/09-dom.html#" id="controlForm" undefined=""><div id="navLinks"><div id="navaLinks"><a accesskey="t" id="toggle" title="Print View" href="javascript:toggle();">Ø</a><a accesskey="z" id="prev" title="Previous Slide" href="javascript:go(-1);">«</a><a accesskey="x" id="next" title="Next Slide" href="javascript:go(1);">»</a></div><div id="navList"><select id="jumplist" onchange="go(&#39;j&#39;);"><option value="0 : CSE3026: Web Application Development  Document Object Model (DOM)">0 : CSE3026: Web Application Development  Document Object Model (DOM)</option><option value="1 : === 9.1: Global DOM Objects ===">1 : === 9.1: Global DOM Objects ===</option><option value="2 : The six global DOM objects">2 : The six global DOM objects</option><option value="3 : The window object">3 : The window object</option><option value="4 : Popup windows with window.open">4 : Popup windows with window.open</option><option value="5 : The document object">5 : The document object</option><option value="6 : The location object">6 : The location object</option><option value="7 : The navigator object">7 : The navigator object</option><option value="8 : The screen object">8 : The screen object</option><option value="9 : The history object">9 : The history object</option><option value="10 : 
		Unobtrusive JavaScript
	">10 : 
		Unobtrusive JavaScript
	</option><option value="11 : Obtrusive event handlers (bad)">11 : Obtrusive event handlers (bad)</option><option value="12 : Attaching an event handler in JavaScript code">12 : Attaching an event handler in JavaScript code</option><option value="13 : When does my code run?">13 : When does my code run?</option><option value="14 : A failed attempt at being unobtrusive">14 : A failed attempt at being unobtrusive</option><option value="15 : 
		The window.onload event
	">15 : 
		The window.onload event
	</option><option value="16 : An unobtrusive event handler">16 : An unobtrusive event handler</option><option value="17 : Common unobtrusive JS errors">17 : Common unobtrusive JS errors</option><option value="18 : 
		Anonymous functions
	">18 : 
		Anonymous functions
	</option><option value="19 : Anonymous function example">19 : Anonymous function example</option><option value="20 : 
		Unobtrusive styling
	">20 : 
		Unobtrusive styling
	</option><option value="21 : === 9.2: The Dom Tree ===">21 : === 9.2: The Dom Tree ===</option><option value="22 : Complex DOM manipulation problems">22 : Complex DOM manipulation problems</option><option value="23 : 
		The DOM tree
	">23 : 
		The DOM tree
	</option><option value="24 : 
		Types of DOM nodes
	">24 : 
		Types of DOM nodes
	</option><option value="25 : 
		Traversing the DOM tree
	">25 : 
		Traversing the DOM tree
	</option><option value="26 : DOM tree traversal example">26 : DOM tree traversal example</option><option value="27 : Element vs. text nodes">27 : Element vs. text nodes</option><option value="28 : 
		Selecting groups of DOM objects
	">28 : 
		Selecting groups of DOM objects
	</option><option value="29 : Getting all elements of a certain type">29 : Getting all elements of a certain type</option><option value="30 : Complex selectors">30 : Complex selectors</option><option value="31 : 
		Creating new nodes
	">31 : 
		Creating new nodes
	</option><option value="32 : Modifying the DOM tree">32 : Modifying the DOM tree</option><option value="33 : Removing a node from the page">33 : Removing a node from the page</option><option value="34 : DOM versus innerHTML hacking">34 : DOM versus innerHTML hacking</option></select></div></div></form></div>
			<div id="currentSlide" style="visibility: visible;"><span id="csHere">11</span> <span id="csSep">/</span> <span id="csTotal">34</span></div>
			<div id="header"></div>
			<div id="footer">
				<h1>CSE3026: Web Application Development</h1>
				<h2>09. Document Object Model (DOM)</h2>
			</div>
		</div>
	
		<div class="presentation">
			<div class="slide" id="slide0" style="visibility: hidden;">			
				<h1><span class="smallerFont">CSE3026: Web Application Development</span> <br> <strong>Document Object Model (DOM)</strong></h1>			
				<br>
				<h2>Scott Uk-Jin Lee</h2>
							
				<p class="license"> 				
					Reproduced with permission of the authors.
					Copyright 2012 Marty Stepp, Jessica Miller, and Victoria Kirst.
					All rights reserved. 
					Further reproduction or distribution is prohibited without written permission.
				</p>
				
				<div class="w3c">
					<a href="http://validator.w3.org/check/referer"><img src="./CSE3026 - 09. Document Object Model (DOM)_files/w3c-html.png" alt="Valid HTML 5"></a>
					<a href="http://jigsaw.w3.org/css-validator/check/referer"><img src="./CSE3026 - 09. Document Object Model (DOM)_files/w3c-css.png" alt="Valid CSS!"></a>
				</div>
			</div>
			
			
			
			
<div class="slide titleslide" id="slide1" style="visibility: hidden;">
	<h1>9.1: Global DOM Objects</h1>

	<ul>
		<li>
			<strong>9.1: Global DOM Objects</strong>
		</li>
		<li>
			9.2: The DOM Tree
		</li>
	</ul>
</div>



<div class="slide" id="slide2" style="visibility: hidden;">
	<h1>The six global DOM objects</h1>

	<p>Every Javascript program can refer to the following global objects:</p>

	<table class="standard">
		<tbody><tr class=" evenrow">
			<th>name</th><th>description</th>
		</tr>

		<tr>
			<td>
				<code><a href="http://www.w3schools.com/jsref/dom_obj_document.asp">document</a></code>
			</td>
			<td>
				current HTML page and its content
			</td>
		</tr>

		<tr class=" evenrow">
			<td>
				<code><a href="http://www.w3schools.com/jsref/obj_history.asp">history</a></code>
			</td>
			<td>
				list of pages the user has visited
			</td>
		</tr>

		<tr>
			<td>
				<code><a href="http://www.w3schools.com/jsref/obj_location.asp">location</a></code>
			</td>
			<td>
				URL of the current HTML page
			</td>
		</tr>

		<tr class=" evenrow">
			<td>
				<code><a href="http://www.w3schools.com/jsref/obj_navigator.asp">navigator</a></code>
			</td>
			<td>
				info about the web browser you are using
			</td>
		</tr>

		<tr>
			<td>
				<code><a href="http://www.w3schools.com/jsref/obj_screen.asp">screen</a></code>
			</td>
			<td>
				info about the screen area occupied by the browser
			</td>
		</tr>

		<tr class=" evenrow">
			<td>
				<code><a href="http://www.w3schools.com/jsref/obj_window.asp">window</a></code>
			</td>
			<td>
				the browser window
			</td>
		</tr>
	</tbody></table>
</div>



<div class="slide" id="slide3" style="visibility: hidden;">
	<h1>The <a href="http://www.w3schools.com/jsref/obj_window.asp"><code>window</code></a> object</h1>

	<p class="description">
		the entire browser window; the top-level object in DOM hierarchy
	</p>

	<ul>
		<li>technically, all global code and variables become part of the <code>window</code> object</li>

		<li>properties:
			<ul>
				<li>
				<a href="http://www.w3schools.com/jsref/dom_obj_document.asp"><code>document</code></a>, 
				<a href="http://www.w3schools.com/jsref/obj_history.asp"><code>history</code></a>, 
				<a href="http://www.w3schools.com/jsref/obj_location.asp"><code>location</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_win_name.asp"><code>name</code></a>
				</li>
			</ul>
		</li>

		<li>methods:
			<ul>
				<li>
					<a href="http://www.w3schools.com/jsref/met_win_alert.asp"><code>alert</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_confirm.asp"><code>confirm</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_prompt.asp"><code>prompt</code></a> (popup boxes)
				</li>

				<li>
					<a href="http://www.w3schools.com/jsref/met_win_setInterval.asp"><code>setInterval</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_setTimeout.asp"><code>setTimeout</code></a>,
					<a href="http://www.w3schools.com/jsref/met_win_clearInterval.asp"><code>clearInterval</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_clearTimeout.asp"><code>clearTimeout</code></a> (timers)
				</li>

				<li>
					<a href="http://www.w3schools.com/jsref/met_win_open.asp"><code>open</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_close.asp"><code>close</code></a> (popping up new browser windows)
				</li>

				<li>
					<a href="http://www.w3schools.com/jsref/met_win_blur.asp"><code>blur</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_focus.asp"><code>focus</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_moveBy.asp"><code>moveBy</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_moveTo.asp"><code>moveTo</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_print.asp"><code>print</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_resizeBy.asp"><code>resizeBy</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_resizeTo.asp"><code>resizeTo</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_scrollBy.asp"><code>scrollBy</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_win_scrollTo.asp"><code>scrollTo</code></a>
				</li>
			</ul>
		</li>
	</ul>
</div>



<div class="slide" id="slide4" style="visibility: hidden;">
	<h1>Popup windows with <code>window.open</code></h1>
	
	<pre class="examplecode js"><em>window.open</em>("http://foo.com/bar.html", "My Foo Window",
            "width=900,height=600,scrollbars=1");
</pre>

	<hr class="spacedrule">

	<ul>
		<li><a href="http://www.w3schools.com/jsref/met_win_open.asp"><code>window.open</code></a> pops up a new browser window</li>
		<li>THIS method is the cause of all the terrible popups on the web!</li>
		<li>some popup blocker software will prevent this method from running</li>
	</ul>
</div>



<div class="slide" id="slide5" style="visibility: hidden;">
	<h1>The <a href="http://www.w3schools.com/jsref/dom_obj_document.asp"><code>document</code></a> object</h1>

	<p class="description">
		the current web page and the elements inside it
	</p>

	<ul>
		<li>properties:
			<ul>
				<li>
				<a href="http://www.w3schools.com/jsref/coll_doc_anchors.asp"><code>anchors</code></a>, 
				<code>body</code>, 
				<a href="http://www.w3schools.com/jsref/prop_doc_cookie.asp"><code>cookie</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_doc_domain.asp"><code>domain</code></a>, 
				<a href="http://www.w3schools.com/jsref/coll_doc_forms.asp"><code>forms</code></a>, 
				<a href="http://www.w3schools.com/jsref/coll_doc_images.asp"><code>images</code></a>, 
				<a href="http://www.w3schools.com/jsref/coll_doc_links.asp"><code>links</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_doc_referrer.asp"><code>referrer</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_doc_title.asp"><code>title</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_doc_url.asp"><code>URL</code></a>
				</li>
			</ul>
		</li>

		<li>methods:
			<ul>
				<li><a href="http://www.w3schools.com/jsref/met_doc_getelementbyid.asp"><code>getElementById</code></a></li>
				<li><a href="http://www.w3schools.com/jsref/met_doc_getelementsbyname.asp"><code>getElementsByName</code></a></li>
				<li><a href="http://www.w3schools.com/jsref/met_doc_getelementsbytagname.asp"><code>getElementsByTagName</code></a></li>
				<li>
					<a href="http://www.w3schools.com/jsref/met_doc_close.asp"><code>close</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_doc_open.asp"><code>open</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_doc_write.asp"><code>write</code></a>, 
					<a href="http://www.w3schools.com/jsref/met_doc_writeln.asp"><code>writeln</code></a>
				</li>
			</ul>
		</li>
		<li><a href="http://www.w3schools.com/jsref/dom_obj_document.asp">complete list</a></li>
	</ul>
</div>



<div class="slide" id="slide6" style="visibility: hidden;">
	<h1>The <a href="http://www.w3schools.com/jsref/obj_location.asp"><code>location</code></a> object</h1>

	<p class="description">
		the URL of the current web page
	</p>

	<ul>
		<li>properties:
			<ul>
				<li>
				<a href="http://www.w3schools.com/jsref/prop_loc_host.asp"><code>host</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_loc_hostname.asp"><code>hostname</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_loc_href.asp"><code>href</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_loc_pathname.asp"><code>pathname</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_loc_port.asp"><code>port</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_loc_protocol.asp"><code>protocol</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_loc_search.asp"><code>search</code></a>
				</li>
			</ul>
		</li>

		<li>methods:
			<ul>
				<li>
				<a href="http://www.w3schools.com/jsref/met_loc_assign.asp"><code>assign</code></a>, 
				<a href="http://www.w3schools.com/jsref/met_loc_reload.asp"><code>reload</code></a>, 
				<a href="http://www.w3schools.com/jsref/met_loc_replace.asp"><code>replace</code></a>
				</li>
			</ul>
		</li>
		<li><a href="http://www.w3schools.com/jsref/obj_location.asp">complete list</a></li>
	</ul>

</div>



<div class="slide" id="slide7" style="visibility: hidden;">
	<h1>The <a href="http://www.w3schools.com/jsref/obj_navigator.asp"><code>navigator</code></a> object</h1>

	<p class="description">
		information about the web browser application
	</p>

	<ul>
		<li>properties:
			<ul>
				<li>
					<a href="http://www.w3schools.com/jsref/prop_nav_appname.asp"><code>appName</code></a>, 
					<a href="http://www.w3schools.com/jsref/prop_nav_appversion.asp"><code>appVersion</code></a>, 
					<a href="http://www.w3schools.com/jsref/prop_nav_language.asp"><code>language</code></a>, 
					<a href="http://www.w3schools.com/jsref/prop_nav_cookieenabled.asp"><code>cookieEnabled</code></a>, 
					<a href="http://www.w3schools.com/jsref/prop_nav_platform.asp"><code>platform</code></a>, 
					<a href="http://www.w3schools.com/jsref/prop_nav_useragent.asp"><code>userAgent</code></a>
				</li>
				<li><a href="http://www.w3schools.com/jsref/obj_navigator.asp">complete list</a></li>
			</ul>
		</li>

		<li>
			Some web programmers examine the <code>navigator</code> object to see what browser is being used, and write browser-specific scripts and hacks:

			<pre class="examplecode js">if (navigator.appName === "Microsoft Internet Explorer") { ...
</pre>

			<ul>
				<li>(this is poor style; you should not need to do this)</li>
			</ul>
		</li>
	</ul>
</div>



<div class="slide" id="slide8" style="visibility: hidden;">
	<h1>The <a href="http://www.w3schools.com/jsref/obj_screen.asp"><code>screen</code></a> object</h1>

	<p class="description">
		information about the client's display screen
	</p>

	<ul>
		<li>properties:
			<ul>
				<li>
				<a href="http://www.w3schools.com/jsref/prop_screen_availheight.asp"><code>availHeight</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_screen_availwidth.asp"><code>availWidth</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_screen_colordepth.asp"><code>colorDepth</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_screen_height.asp"><code>height</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_screen_pixeldepth.asp"><code>pixelDepth</code></a>, 
				<a href="http://www.w3schools.com/jsref/prop_screen_width.asp"><code>width</code></a>
				</li>
				<li><a href="http://www.w3schools.com/jsref/obj_screen.asp">complete list</a></li>
			</ul>
		</li>
	</ul>
</div>



<div class="slide" id="slide9" style="visibility: hidden;">
	<h1>The <a href="http://www.w3schools.com/jsref/obj_history.asp"><code>history</code></a> object</h1>

	<p class="description">
		the list of sites the browser has visited in this window
	</p>

	<ul>
		<li>properties:
			<ul>
				<li>
				<a href="http://www.w3schools.com/jsref/prop_his_length.asp"><code>length</code></a>
				</li>
			</ul>
		</li>

		<li>methods:
			<ul>
				<li>
				<a href="http://www.w3schools.com/jsref/met_his_back.asp"><code>back</code></a>, 
				<a href="http://www.w3schools.com/jsref/met_his_forward.asp"><code>forward</code></a>, 
				<a href="http://www.w3schools.com/jsref/met_his_go.asp"><code>go</code></a>
				</li>
			</ul>
		</li>
		<li><a href="http://www.w3schools.com/jsref/obj_history.asp">complete list</a></li>
		<li>sometimes the browser won't let scripts view <code>history</code> properties, for security</li>
	</ul>
</div>



<div class="slide" id="slide10" style="visibility: hidden;">
	<h1>
		Unobtrusive JavaScript
	</h1>

	<ul>
		<li>JavaScript event code seen previously was <em>obtrusive</em>, in the HTML; this is bad style</li>
		<li>now we'll see how to write <a href="http://en.wikipedia.org/wiki/Unobtrusive_JavaScript"><em>unobtrusive</em> JavaScript</a> code
			<ul>
				<li>HTML with minimal JavaScript inside</li>
				<li>uses the DOM to attach and execute all JavaScript functions</li>
			</ul>
		</li>
		<li>allows <a href="http://alistapart.com/articles/behavioralseparation">separation</a> of web site into 3 major categories:
			<ul>
				<li><span class="term">content</span> (HTML) - what is it?</li>
				<li><span class="term">presentation</span> (CSS) - how does it look?</li>
				<li><span class="term">behavior</span> (JavaScript) - how does it respond to user interaction?</li>
			</ul>
		</li>
	</ul>
</div>



<div class="slide" id="slide11" style="visibility: visible;">
	<h1>Obtrusive event handlers (bad)</h1>

	<div class="example">
		<pre class="examplecode html">&lt;button <em class="bad">onclick="okayClick();"</em>&gt;OK&lt;/button&gt;
</pre>

		<pre class="examplecode js"><span class="comment">// called when OK button is clicked</span>
function okayClick() {
    alert("booyah");
}
</pre>

		<div class="exampleoutput insertoutput"><button onclick="okayClick();">OK</button>
</div>
	</div>

	<ul>
		<li>this is bad style (HTML is cluttered with JS code)</li>
		<li>goal: remove all JavaScript code from the HTML body</li>
	</ul>
</div>




<div class="slide" id="slide12" style="visibility: hidden;">
	<h1>Attaching an event handler in JavaScript code</h1>

	<pre class="syntaxtemplate js"><span class="comment">// where <var>element</var> is a DOM element object</span>
<var>element</var>.on<var>event</var> = <var>function</var>;
</pre>

	<div class="example">
		<pre class="examplecode html">&lt;button <em>id="ok"</em>&gt;OK&lt;/button&gt;
</pre>
		
		<pre class="examplecode js">var okButton = document.getElementById("ok");
okButton.<em>onclick</em> = <em>okayClick</em>;
</pre>

		<div class="exampleoutput insertoutput"><button id="ok">OK</button>
</div>
	</div>

	<ul>
		<li>it is legal to attach event handlers to elements' DOM objects in your JavaScript code
			<ul>
				<li>
					notice that you do <strong>not</strong> put parentheses after the function's name
				</li>
			</ul>
		</li>
		<li>this is better style than attaching them in the HTML</li>
		<li>Where should we put the above code?</li>
	</ul>
</div>



<div class="slide" id="slide13" style="visibility: hidden;">
	<h1>When does my code run?</h1>

	<div class="example">
		<pre class="examplecode html">&lt;html&gt;
    &lt;head&gt;
        <em>&lt;script src="myfile.js" type="text/javascript"&gt;&lt;/script&gt;</em>
    &lt;/head&gt;
    &lt;body&gt; ... &lt;/body&gt; &lt;/html&gt;
</pre>

		<pre class="examplecode examplecode2 examplecodelast js"><span class="comment">// global code</span>
var x = 3;
function f(n) { return n + 1; }
function g(n) { return n - 1; }
x = f(x);
</pre>
	</div>

	<ul>
		<li>your file's JS code runs the moment the browser loads the <code>script</code> tag
			<ul>
				<li>
					any variables are declared immediately
				</li>
				<li>
					any functions are declared but not called, unless your global code explicitly calls them
				</li>
			</ul>
		</li>
		<li class="">at this point in time, the browser has not yet read your page's <code>body</code>
			<ul>
				<li>
					none of the DOM objects for tags on the page have been created yet
				</li>
			</ul>
		</li>
	</ul>
</div>



<div class="slide" id="slide14">
	<h1>A failed attempt at being unobtrusive</h1>

	<div class="example">
		<pre class="examplecode html">&lt;html&gt;
    &lt;head&gt;
        <em>&lt;script src="myfile.js" type="text/javascript"&gt;&lt;/script&gt;</em>
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;&lt;button id="ok"&gt;OK&lt;/button&gt;&lt;/div&gt;
</pre>

		<pre class="examplecode examplecode2 examplecodelast js"><span class="comment">// global code</span>
<em class="bad">document.getElementById("ok").onclick = okayClick;</em>   <span class="comment">// error: null</span>
</pre>
	</div>

	<ul>
		<li>problem: global JS code runs the moment the script is loaded</li>
		<li>script in <code>head</code> is processed before page's <code>body</code> has loaded
			<ul>
				<li>no elements are available yet or can be accessed yet via the DOM</li>
			</ul>
		</li>
		<li>we need a way to attach the handler after the page has loaded...</li>
	</ul>
</div>



<div class="slide" id="slide15">
	<h1>
		The <code>window.onload</code> event
	</h1>

	<pre class="syntaxtemplate js"><span class="comment">// this will run once the page has finished loading</span>
function <var>functionName</var>() {
    <var>element</var>.<var>event</var> = <var>functionName</var>;
    <var>element</var>.<var>event</var> = <var>functionName</var>;
    ...
}

<em>window.onload = <var>functionName</var>;</em>   <span class="comment">// global code</span>
</pre>

	<ul>
		<li>we want to attach our event handlers right after the page is done loading
			<ul>
				<li>there is a global event called <code>window.onload</code> event that occurs at that moment</li>
			</ul>
		</li>
		<li>in <code>window.onload</code> handler we attach all the other handlers to run when events occur</li>
	</ul>
</div>



<div class="slide" id="slide16">
	<h1>An unobtrusive event handler</h1>

	<div class="example">
		<pre class="examplecode html">&lt;button id="ok"&gt;OK&lt;/button&gt;   <span class="comment">&lt;!-- look Ma, no JavaScript! --&gt;</span>
</pre>

		<pre class="examplecode examplecode2 js"><span class="comment">// called when page loads; sets up event handlers</span>
function pageLoad() {
    document.getElementById("ok").onclick = okayClick;
}

function okayClick() {
    alert("booyah");
}

<em>window.onload = pageLoad;</em>  <span class="comment">// global code</span>
</pre>

		<div class="exampleoutput">
			<button onclick="alert(&#39;booyah&#39;);">OK</button>
		</div>
	</div>
</div>



<div class="slide" id="slide17">
	<h1>Common unobtrusive JS errors</h1>

	<ul>
		<li>many students mistakenly write <code>()</code> when attaching the handler

			<pre class="examplecode js">window.onload = pageLoad<del>()</del>;
window.onload = <em>pageLoad</em>;

okButton.onclick = okayClick<del>()</del>;
okButton.onclick = <em>okayClick</em>;
</pre>

			<ul>
				<li>our <span class="term">JSLint</span> checker will catch this mistake</li>
			</ul>
		</li>

		<li>event names are all lowercase, not capitalized like most variables

			<pre class="examplecode js">window.<del>onLoad</del> = pageLoad;
window.<em>onload</em> = pageLoad;
</pre>
		</li>
	</ul>
</div>



<div class="slide" id="slide18">
	<h1>
		Anonymous functions
	</h1>

	<pre class="syntaxtemplate js">function(<var>parameters</var>) {
    <var>statements</var>;
}
</pre>

	<ul>
		<li>JavaScript allows you to declare <span class="term">anonymous functions</span></li>
		<li>quickly creates a function without giving it a name</li>
		<li>can be stored as a variable, attached as an event handler, etc.</li>
	</ul>
</div>



<div class="slide" id="slide19">
	<h1>Anonymous function example</h1>

	<div class="example">
		<pre class="examplecode js">window.onload = <em>function() {</em>
    var okButton = document.getElementById("ok");
    okButton.onclick = okayClick;
<em>};</em>

function okayClick() {
    alert("booyah");
}
</pre>

		<div class="exampleoutput">
			<button onclick="alert(&#39;booyah&#39;);">OK</button>
		</div>
	</div>

	<ul>
		<li>or the following is also legal (though harder to read and bad style):</li>
	</ul>

	<pre class="examplecode js">window.onload = <em>function() {</em>
    var okButton = document.getElementById("ok");
    okButton.onclick = <em>function() {</em>
        alert("booyah");
    <em>};</em>
<em>};</em>
</pre>
</div>



<div class="slide" id="slide20">
	<h1>
		Unobtrusive styling
	</h1>

	<pre class="examplecode js">function okayClick() {
    <del>this.style.color = "red";</del>
    this.<em>className = "highlighted"</em>;
}
</pre>

	<pre class="examplecode css">.<em>highlighted</em> { color: red; }
</pre>
				
	<ul>
		<li>well-written JavaScript code should contain as little CSS as possible</li>
		<li>use JS to set CSS classes/IDs on elements</li>
		<li>define the styles of those classes/IDs in your CSS file</li>
	</ul>
</div>



<div class="slide titleslide" id="slide21">
	<h1>9.2: The Dom Tree</h1>

	<ul>
		<li>
			9.1: Global DOM Objects
		</li>
		<li>
			<strong>9.2: The DOM Tree</strong>
		</li>
	</ul>
</div>



<div class="slide" id="slide22">
	<h1>Complex DOM manipulation problems</h1>

	<p>
		How would we do each of the following in JavaScript code?  Each involves modifying each one of a group of elements ...
	</p>

	<ul>
		<li>When the Go button is clicked, reposition all the <code>div</code>s of class <code>puzzle</code> to random x/y locations.</li>
		<li>When the user hovers over the maze boundary, turn all maze walls red.</li>
		<li>Change every other item in the <code>ul</code> list with <code>id</code> of <code>TAs</code> to have a gray background.</li>
	</ul>
</div>



<div class="slide" id="slide23">
	<h1>
		The DOM tree
	</h1>

	<div class="figure">
		<img src="./CSE3026 - 09. Document Object Model (DOM)_files/dom_tree.gif" alt="DOM tree">
	</div>

	<ul>
		<li>
			The elements of a page are nested into a tree-like structure of objects
			<ul>
				<li>
					the DOM has properties and methods for traversing this tree
				</li>
			</ul>
		</li>
	</ul>
</div>



<div class="slide" id="slide24">
	<h1>
		Types of DOM nodes
	</h1>

	<pre class="examplecode html">&lt;p&gt;
    This is a paragraph of text with a 
    &lt;a href="/path/page.html"&gt;link in it&lt;/a&gt;.
&lt;/p&gt;
</pre>
	
	<div class="rightfigure" style="width: 33%">
		<img src="./CSE3026 - 09. Document Object Model (DOM)_files/figure_4_dom_tree.png" alt="DOM Tree" style="width: 100%">
	</div>
	
	<ul>
		<li><img src="./CSE3026 - 09. Document Object Model (DOM)_files/element_node.png" alt="element node">
		<strong>element nodes</strong> (HTML tag)
			<ul>
				<li>can have children and/or attributes</li>
			</ul>
		</li>

		<li><img src="./CSE3026 - 09. Document Object Model (DOM)_files/text_node.png" alt="text node">
		<strong>text nodes</strong> (text in a block element)
		</li>

		<li><img src="./CSE3026 - 09. Document Object Model (DOM)_files/attribute_node.png" alt="attribute node">
		<strong>attribute nodes</strong> (attribute/value pair)
			<ul>
				<li>text/attributes are children in an element node</li>
				<li>cannot have children or attributes</li>
				<li>not usually shown when drawing the DOM tree</li>
			</ul>
		</li>
	</ul>
</div>



<div class="slide" id="slide25">
	<h1>
		Traversing the DOM tree
	</h1>

	<p>
		every node's DOM object has the following properties:
	</p>

	<table class="standard">
		<tbody><tr class=" evenrow">
			<th>
				name(s)
			</th>
			<th>
				description
			</th>
		</tr>

		<tr>
			<td>
				<code>firstChild</code>, <code>lastChild</code>
			</td>
			<td>
				start/end of this node's list of children
			</td>
		</tr>

		<tr class=" evenrow">
			<td>
				<code>childNodes</code>
			</td>
			<td>
				array of all this node's children
			</td>
		</tr>

		<tr>
			<td>
				<code>nextSibling</code>, <code>previousSibling</code>
			</td>
			<td>
				neighboring nodes with the same parent
			</td>
		</tr>

		<tr class=" evenrow">
			<td>
				<code>parentNode</code>
			</td>
			<td>
				the element that contains this node
			</td>
		</tr>
	</tbody></table>

	<ul>
		<li><a href="http://www.w3schools.com/dom/dom_node.asp">complete list of DOM node properties</a></li>
		<li><a href="http://www.w3schools.com/dom/dom_mozilla_vs_ie.asp">browser incompatiblity information</a> (IE6 sucks)</li>

		<!--
		<li><a href="http://www.w3schools.com/dom/dom_nodes_info.asp">other properties</a>: <code>nodeName</code>, <code>nodeType</code>, <code>nodeValue</code></li>
		-->
	</ul>
</div>



<div class="slide" id="slide26">
	<h1>DOM tree traversal example</h1>

	<pre class="examplecode html">&lt;p id="foo"&gt;This is a paragraph of text with a 
    &lt;a href="/path/to/another/page.html"&gt;link&lt;/a&gt;.&lt;/p&gt;
</pre>

	<div class="centerfigure">
		<img src="./CSE3026 - 09. Document Object Model (DOM)_files/figure_5_tree_structure.png" alt="navigate tree" style="width: 38%">
	</div>
</div>



<div class="slide" id="slide27">
	<h1>Element vs. text nodes</h1>

	<pre class="examplecode html">&lt;div&gt;
    &lt;p&gt;
        This is a paragraph of text with a 
        &lt;a href="page.html"&gt;link&lt;/a&gt;.
    &lt;/p&gt;
&lt;/div&gt;
</pre>
				
	<ul>
		<li>Q: How many children does the <code>div</code> above have?</li>
		<li class="">A: 3
			<ul>
				<li>an element node representing the &lt;p&gt;</li>
				<li>two <em>text nodes</em> representing <code>"\n\t"</code> (before/after the paragraph)</li>
			</ul>
		</li>
		<li>
			Q: How many children does the paragraph have?  The <code>a</code> tag?
		</li>
	</ul>
</div>



<div class="slide" id="slide28">
	<h1>
		Selecting groups of DOM objects
	</h1>

	<ul>
		<li>
			methods in <code>document</code> and other DOM objects (* = HTML5):
		</li>
	</ul>

	<table class="standard">
		<tbody><tr class=" evenrow">
			<th>
				name
			</th>
			<th>
				description
			</th>
		</tr>

		<tr>
			<td>
				<a href="http://www.w3schools.com/jsref/met_doc_getelementsbytagname.asp"><code>getElementsByTagName</code></a>
			</td>
			<td>
				returns array of descendents with the given tag, such as <code>"div"</code>
			</td>
		</tr>

		<tr class=" evenrow">
			<td>
				<a href="http://www.w3schools.com/jsref/met_doc_getelementsbyname.asp"><code>getElementsByName</code></a>
			</td>
			<td>
				returns array of descendents with the given <code>name</code> attribute (mostly useful for accessing form controls)
			</td>
		</tr>

		<tr>
			<td>
				<a href="https://developer.mozilla.org/en/DOM/Element.querySelector"><code>querySelector</code></a>  *
			</td>
			<td>
				returns the first element that would be matched by the given CSS selector string
			</td>
		</tr>

		<tr class=" evenrow">
			<td>
				<a href="https://developer.mozilla.org/en/DOM/Element.querySelectorAll"><code>querySelectorAll</code></a>  *
			</td>
			<td>
				returns an array of all elements that would be matched by the given CSS selector string
			</td>
		</tr>
	</tbody></table>
</div>



<div class="slide" id="slide29">
	<h1>Getting all elements of a certain type</h1>

	<p>
			highlight all paragraphs in the document:
	</p>

	<pre class="examplecode js">var allParas = <em>document.querySelectorAll</em>("p");
for (var i = 0; i &lt; allParas.length; i++) {
    allParas[i].style.backgroundColor = "yellow";
}
</pre>

	<pre class="html">&lt;body&gt;
    <em>&lt;p&gt;This is the first paragraph&lt;/p&gt;
    &lt;p&gt;This is the second paragraph&lt;/p&gt;
    &lt;p&gt;You get the idea...&lt;/p&gt;</em>
&lt;/body&gt;
</pre>
</div>



<div class="slide" id="slide30">
	<h1>Complex selectors</h1>

	<p>
		highlight all paragraphs inside of the section with ID <code>"address"</code>:
	</p>

	<pre class="examplecode js"><span class="comment">// var addrParas = document.getElementById("address").getElementsByTagName("p");</span>
var addrParas = <em>document.querySelectorAll</em>("#address p");
for (var i = 0; i &lt; addrParas.length; i++) {
    addrParas[i].style.backgroundColor = "yellow";
}
</pre>

	<pre class="html"><code>&lt;p&gt;This won't be returned!&lt;/p&gt;
&lt;div id="address"&gt;
    <em>&lt;p&gt;1234 Street&lt;/p&gt;
    &lt;p&gt;Atlanta, GA&lt;/p&gt;</em>
&lt;/div&gt;</code></pre>

</div>



<div class="slide" id="slide31">
	<h1>
		Creating new nodes
	</h1>

	<table class="standard">
		<tbody><tr class=" evenrow">
			<th>
				name
			</th>
			<th>
				description
			</th>
		</tr>

		<tr>
			<td>
				<code>document.createElement("<var>tag</var>")</code>
			</td>
			<td>
				creates and returns a new empty DOM node representing an element of that type
			</td>
		</tr>

		<tr class=" evenrow">
			<td>
				<code>document.createTextNode("<var>text</var>")</code>
			</td>
			<td>
				creates and returns a text node containing given text
			</td>
		</tr>
	</tbody></table>

	<pre class="examplecode js"><span class="comment">// create a new &lt;h2&gt; node</span>
var newHeading = <em>document.createElement("h2")</em>;
newHeading.innerHTML = "This is a heading";
newHeading.style.color = "green";
</pre>

	<ul>
		<li>merely creating a node does not add it to the page</li>
		<li>you must add the new node as a child of an existing element on the page...</li>
	</ul>
</div>



<div class="slide" id="slide32" onclick="var p = document.createElement(&#39;p&#39;); p.innerHTML = &#39;A paragraph!&#39;;  this.appendChild(p);">
	<h1>Modifying the DOM tree</h1>

	<p>Every DOM element object has these methods:</p>

	<table class="standard">
		<tbody><tr class=" evenrow">
			<th>
				name
			</th>
			<th>
				description
			</th>
		</tr>

		<tr>
			<td>
				<code><a href="http://www.w3schools.com/dom/met_node_appendchild.asp">appendChild</a>(<var>node</var>)</code>
			</td>
			<td>
				places given node at end of this node's child list
			</td>
		</tr>

		<tr class=" evenrow">
			<td>
				<code><a href="http://www.w3schools.com/dom/met_node_insertbefore.asp">insertBefore</a>(<var>new</var>,&nbsp;<var>old</var>)</code>
			</td>
			<td>
				places the given new node in this node's child list just before <code>old</code> child
			</td>
		</tr>

		<tr>
			<td>
				<code><a href="http://www.w3schools.com/dom/met_node_removechild.asp">removeChild</a>(<var>node</var>)</code>
			</td>
			<td>
				removes given node from this node's child list
			</td>
		</tr>

		<tr class=" evenrow">
			<td>
				<code><a href="http://www.w3schools.com/dom/met_node_replacechild.asp">replaceChild</a>(<var>new</var>,&nbsp;<var>old</var>)</code>
			</td>
			<td>
				replaces given child with new node
			</td>
		</tr>
	</tbody></table>

	<pre class="examplecode js">var p = <em>document.getElementById(document.createElement("p"))</em>;
p.innerHTML = "A paragraph!";
<em>document.getElementById("main").appendChild(p)</em>;
</pre>
</div>



<div class="slide" id="slide33">
	<h1>Removing a node from the page</h1>

	<pre class="examplecode js" onclick="var li = document.getElementById(&#39;killme&#39;); li.parentNode.removeChild(li);">function slideClick() {
    var bullets = document.getElementsByTagName("li");
    for (var i = 0; i &lt; bullets.length; i++) {
        if (bullets[i].innerHTML.indexOf("children") &gt;= 0) {
            <em>bullets[i].parentNode.removeChild(bullets[i]);</em>
        }
    }
}
</pre>

	<ul>
		<li id="killme">
			each DOM object has a <code>removeChild</code> method to remove its children from the page
		</li>
	</ul>
</div>



<div class="slide" id="slide34">
	<h1>DOM versus <code>innerHTML</code> hacking</h1>

	<p>Why not just code the previous example this way?</p>

	<pre class="examplecode js">function slideClick() {
    document.getElementById("thisslide").<em>innerHTML += "&lt;p&gt;A paragraph!&lt;/p&gt;"</em>;
}
</pre>

	<div class="">
		<ul>
			<li>Imagine that the new node is more complex:
				<ul>
					<li>ugly: bad style on many levels (e.g. JS code embedded within HTML)</li>
					<li>error-prone: must carefully distinguish <code>"</code> and <code>'</code></li>
					<li>can only add at beginning or end, not in middle of child list</li>
				</ul>
			</li>
		</ul>

<pre class="examplecode js">function slideClick() {
    this.innerHTML += <em>"&lt;p style='color: red; " +
            "margin-left: 50px;' " +
            "onclick='myOnClick();'&gt;" +
            "A paragraph!&lt;/p&gt;"</em>;
}
</pre>

	</div>
</div>

			
			
			

		</div><!-- end div class="presentation" -->
	
		</body></html>